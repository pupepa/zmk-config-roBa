#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/pointing.h>

#undef ZMK_POINTING_DEFAULT_SCRL_VAL

#define ZMK_POINTING_DEFAULT_SCRL_VAL 100
#define EXPOSE  LC(UP)      // mission control (aka expose)

&mt {
    flavor = "balanced";
    tapping-term-ms = <200>;
    quick-tap-ms = <0>;
};

&trackball {
    // automouse-layer = <4>;

    scroll-layers = <4>;

    // arrows {
    //     layers = <3>;
    //     bindings =
    //         <&kp RIGHT_ARROW>,
    //         <&kp LEFT_ARROW>,
    //         <&kp UP_ARROW>,
    //         <&kp DOWN_ARROW>;
    //     tick = <10>;
    //     wait-ms = <5>;
    //     tap-ms = <5>;
    // };
};

/ {
    combos {
        compatible = "zmk,combos";

        tab {
            bindings = <&kp LS(TAB)>;
            key-positions = <11 12>;
        };

        shift_tab {
            bindings = <&kp TAB>;
            key-positions = <12 13>;
        };

        double_quotation {
            bindings = <&kp SEMI>;
            key-positions = <20 21>;
        };

        eq {
            bindings = <&kp EQUAL>;
            key-positions = <8 9>;
        };

        right_brace {
            bindings = <&kp RIGHT_BRACE>;
            key-positions = <7 8>;
        };

        left_brace {
            bindings = <&kp LEFT_BRACE>;
            key-positions = <6 7>;
        };

        right_bracket {
            bindings = <&kp RIGHT_BRACKET>;
            key-positions = <31 32>;
        };

        left_bracket {
            bindings = <&kp LEFT_BRACKET>;
            key-positions = <31 30>;
        };

        left_parenthesis {
            bindings = <&kp LEFT_PARENTHESIS>;
            key-positions = <18 19>;
        };

        right_parenthesis {
            bindings = <&kp RIGHT_PARENTHESIS>;
            key-positions = <19 20>;
        };

        minus {
            bindings = <&kp MINUS>;
            key-positions = <32 33>;
        };
    };

    macros {
        to_layer_0: to_layer_0 {
            compatible = "zmk,behavior-macro-one-param";
            #binding-cells = <1>;
            bindings = <&to 0 &macro_param_1to1 &kp MACRO_PLACEHOLDER>;
            label = "TO_LAYER_0";
        };

        ime_toggle: ime_toggle {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&macro_press>,
                <&kp LCTRL>,
                <&macro_tap>,
                <&kp SPACE>,
                <&macro_release>,
                <&kp LCTRL>;
        };
    };

    behaviors {
        lt_to_layer_0: lt_to_layer_0 {
            compatible = "zmk,behavior-hold-tap";
            label = "LAYER_TAP_TO_0";
            bindings = <&mo>, <&to_layer_0>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
        };

        scroll_up_down: behavior_sensor_rotate_mouse_wheel_up_down {
            compatible = "zmk,behavior-sensor-rotate";
            #sensor-binding-cells = <0>;
            bindings = <&msc SCRL_DOWN>, <&msc SCRL_UP>;

            // 追加: スクロールのタップ時間を設定 (20ms)

            tap-ms = <20>;
        };

        multi_tap_tab_bspc: behavior_multi_tap {
            label = "MT_TAB_BSPC";
            #binding-cells = <0>;
            bindings = <&kp TAB>, <&kp BSPC>;

            max-taps = <2>;
            max-tap-interrupt-ms = <250>;
        };

        sft_ime: shift_ime_toggle {
            compatible = "zmk,behavior-hold-tap";
            label = "SHIFT_IME_TOGGLE";
            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <200>;
            quick-tap-ms = <125>;
            bindings = <&kp>, <&ime_toggle>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            bindings = <
&lt 5 Q      &kp W         &kp E         &kp R                    &kp T                                                                   &kp Y                   &kp U            &lt 4 I              &kp O          &kp P
&mt LCTRL A  &kp S         &kp D         &kp F                    &kp G                 &kp LC(T)                   &kp MINUS             &kp H                   &kp J            &kp K                &kp L          &kp BACKSPACE
&kp Z        &kp X         &kp C         &kp V                    &kp B                 &mkp MB1                    &kp SINGLE_QUOTE      &kp N                   &mt RIGHT_GUI M  &mt RIGHT_ALT COMMA  &mt RCTRL DOT  &mt RIGHT_SHIFT SLASH
&kp LCTRL    &kp LEFT_ALT  &kp LEFT_WIN  &mt LEFT_SHIFT CAPSLOCK  &lt_to_layer_0 1 TAB  &lt_to_layer_0 2 SPACE      &lt_to_layer_0 2 ESC  &lt_to_layer_0 1 ENTER                                                       &kp EXPOSE
            >;

            sensor-bindings = <&scroll_up_down>;
        };

        SYMBOLS {
            bindings = <
&kp EXCLAMATION  &kp AT  &kp HASH  &kp DOLLAR  &kp PERCENT                                      &kp CARET       &kp AMPERSAND  &kp ASTRK      &kp SINGLE_QUOTE  &kp DOUBLE_QUOTES
&kp TILDE        &trans  &trans    &trans      &trans          &trans        &kp UNDER          &kp PLUS        &kp COLON      &kp PIPE       &mkp MB1          &mkp MB2
&kp GRAVE        &trans  &trans    &trans      &trans          &mkp MB2      &kp DOUBLE_QUOTES  &kp KP_EQUAL    &kp SEMICOLON  &kp BACKSLASH  &trans            &trans
&trans           &trans  &trans    &trans      &kp LANGUAGE_2  &trans        &trans             &kp LANGUAGE_1                                                  &trans
            >;
        };

        NUM {
            bindings = <
&kp KP_NUMBER_1       &kp KP_NUMBER_2       &kp KP_NUMBER_3  &kp KP_NUMBER_4    &kp KP_NUMBER_5                            &kp KP_NUMBER_6  &kp KP_NUMBER_7  &kp KP_NUMBER_8  &kp KP_NUMBER_9  &kp KP_NUMBER_0
&trans                &trans                &trans           &kp LC(LG(SPACE))  &trans           &trans         &trans     &kp LEFT         &kp DOWN         &kp UP           &kp RIGHT        &trans
&trans                &trans                &trans           &kp LG(LS(V))      &trans           &trans         &trans     &trans           &trans           &trans           &trans           &trans
&kp LS(LG(NUMBER_4))  &kp LS(LG(NUMBER_5))  &trans           &trans             &trans           &kp LANG2      &kp LANG1  &trans                                                              &trans
            >;
        };

        ARROW {
            bindings = <
&kp ESCAPE  &trans         &trans  &trans             &kp LC(T)                      &trans          &trans    &trans        &kp LS(LG(NUMBER_4))  &kp LS(LG(NUMBER_5))
&kp TAB     &kp LG(SPACE)  &trans  &kp LC(LG(SPACE))  &trans     &trans      &trans  &kp LEFT_ARROW  &kp DOWN  &kp UP_ARROW  &kp RIGHT_ARROW       &trans
&trans      &trans         &trans  &kp LG(LS(V))      &trans     &trans      &trans  &trans          &trans    &mkp MB1      &mkp MB2              &trans
&trans      &trans         &trans  &trans             &trans     &trans      &trans  &trans                                                        &trans
            >;

            sensor-bindings = <&inc_dec_kp LC(PAGE_UP) LC(PAGE_DOWN)>;
        };

        SCROLL {
            bindings = <
&trans  &trans  &trans  &trans  &trans                      &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans                          &trans
            >;
        };

        layer_6 {
            bindings = <
&trans  &trans        &trans        &trans        &trans                           &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4
&trans  &trans        &trans        &trans        &trans  &trans      &trans       &trans        &trans        &trans        &trans        &trans
&trans  &kp NUMBER_1  &kp NUMBER_2  &kp NUMBER_3  &trans  &trans      &bootloader  &trans        &trans        &trans        &trans        &bt BT_CLR
&trans  &trans        &trans        &trans        &trans  &trans      &trans       &trans                                                  &bt BT_CLR_ALL
            >;
        };
    };
};
